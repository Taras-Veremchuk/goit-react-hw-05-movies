{"version":3,"file":"static/js/953.498664bc.chunk.js","mappings":"4OACaA,EAAOC,EAAAA,EAAAA,EAAH,8GAMJC,EAAKD,EAAAA,EAAAA,GAAH,oXAmBFE,EAAKF,EAAAA,EAAAA,GAAH,qsBA0BFG,EAAMH,EAAAA,EAAAA,IAAH,+E,SC5BhB,EArBiB,SAAC,GAAe,IAAbI,EAAY,EAAZA,MAClB,OACE,SAACH,EAAD,UACGG,EAAMC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAb,OACT,UAACN,EAAD,YACE,SAACC,EAAD,CACEM,IACED,EAAY,0CAC2BA,GACnC,sCAENE,IAAKH,EACLI,MAAM,QACNC,OAAO,SAERL,IAXMD,EADA,KAiBhB,ECeD,EAjCa,WACX,OAA0BO,EAAAA,EAAAA,UAAS,IAAnC,eAAOT,EAAP,KAAcU,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAyBR,OAxBAE,EAAAA,EAAAA,YAAU,WACR,IASMC,EAAG,6CAAyCH,EAAzC,2CADG,oCAGZI,MAAMD,EAXU,CACdE,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,gOAOHC,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAASE,MAEnB,IACAH,MAAK,SAAApB,GACJU,EAASV,EAAMwB,KAChB,IACAC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,EAAlB,GACb,GAAE,CAACf,IAEGX,EAAM6B,OAAS,GACpB,SAAC,EAAD,CAAU7B,MAAOA,KAEjB,SAACL,EAAD,iCAEH,C","sources":["components/Cast/CastInfo.styled.jsx","components/Cast/CastInfo.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nexport const Text = styled.p`\n  text-align: center;\n  font-weight: 500;\n  font-size: 24px;\n  line-height: 1.33;\n`;\nexport const Ul = styled.ul`\n  display: -webkit-inline-box;\n  justify-content: center;\n  gap: 20px;\n  padding-bottom: 20px;\n  padding-top: 20px;\n  @media (min-width: 768px) {\n    gap: 32px;\n    padding-top: 28px;\n    padding-bottom: 28px;\n  }\n  @media (min-width: 1280px) {\n    gap: 16px;\n    padding-top: 28px;\n    padding-bottom: 28px;\n  }\n  flex-wrap: wrap;\n`;\n\nexport const Li = styled.li`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  width: 100%;\n  flex-basis: calc((100% - 69px) / 4);\n  border-bottom: 1px solid #eeeeee;\n  border-right: 1px solid #eeeeee;\n  border-left: 1px solid #eeeeee;\n  transform: scale(1);\n  transition: all 500ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  &:hover,\n  &:focus {\n    box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n      1px 4px 6px rgba(0, 0, 0, 0.16);\n    transform: scale(1.03);\n  }\n  @media (min-width: 768px) {\n    flex-basis: calc((100% - 172px) / 6);\n  }\n  @media (min-width: 1280px) {\n    flex-basis: calc((100% - 165px) / 10);\n  }\n`;\n\nexport const Img = styled.img`\n  width: 100%;\n  height: auto;\n  object-fit: cover;\n`;\n","import { Ul, Li, Img } from './CastInfo.styled';\nimport PropTypes from 'prop-types';\n\nconst CastInfo = ({ casts }) => {\n  return (\n    <Ul>\n      {casts.map(({ id, name, profile_path }) => (\n        <Li key={id}>\n          <Img\n            src={\n              profile_path\n                ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                : 'https://via.placeholder.com/120x180'\n            }\n            alt={name}\n            width=\"120px\"\n            height=\"auto\"\n          />\n          {name}\n        </Li>\n      ))}\n    </Ul>\n  );\n};\nexport default CastInfo;\nCastInfo.propTypes = {\n  casts: PropTypes.array,\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport CastInfo from 'components/Cast/CastInfo';\nimport { Text } from './CastInfo.styled';\n\nconst Cast = () => {\n  const [casts, setCasts] = useState([]);\n  const { movieId } = useParams();\n  useEffect(() => {\n    const options = {\n      method: 'GET',\n      headers: {\n        accept: 'application/json',\n        Authorization:\n          'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2OWExMGZiNzYyMDgzZTBiYTg4M2ZjNmU4NjBmNzUxMiIsInN1YiI6IjY0NjU1MDE0MDA2YjAxMDE2ODRhMjBlNCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.BDHjxE3xlwjt1Vmj0BYBvFDhjMr4ND7lLemmi809zrU',\n      },\n    };\n    const KEY = '69a10fb762083e0ba883fc6e860f7512';\n    const URL = `https://api.themoviedb.org/3/movie/${movieId}/credits?language=en-US&api_key=${KEY}`;\n\n    fetch(URL, options)\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n      })\n      .then(casts => {\n        setCasts(casts.cast);\n      })\n      .catch(err => console.error(err));\n  }, [movieId]);\n\n  return casts.length > 0 ? (\n    <CastInfo casts={casts} />\n  ) : (\n    <Text>There are not casts</Text>\n  );\n};\nexport default Cast;\n"],"names":["Text","styled","Ul","Li","Img","casts","map","id","name","profile_path","src","alt","width","height","useState","setCasts","movieId","useParams","useEffect","URL","fetch","method","headers","accept","Authorization","then","response","ok","json","cast","catch","err","console","error","length"],"sourceRoot":""}